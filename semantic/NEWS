Semantic 2.0 is a major new version.

* API changes

** Lexical analysis.

*** The old `semantic-flex' API is deprecated.

The lexical analysis toolkit has been completely rewritten as a new
`semantic-lex' API.

*** Lexical token management.

`semantic-lex-token'
Create a new lexical token.

`semantic-lex-token-class'
Fetch the class of a lexical token.

`semantic-lex-token-bounds'
Fetch the start and end locations of a lexical token.

`semantic-lex-token-start' and `semantic-lex-token-end'
Respectively fetch the start and end position of a lexical token.

`semantic-lex-token-text'
Fetch the text associated with a lexical token.

*** Macros to easily build custom lexers.

`define-lex'
Define a new lexer as a set of single lexical analyzers.

`define-lex-analyzer'
Base macro to create a single lexical analyzer.

`define-lex-regex-analyzer' and `define-lex-simple-regex-analyzer'
Create single lexical analyzers that match a regexp.

`define-lex-block-analyzer'
Create a single lexical analyzer for paired delimiters blocks.

*** A set of useful single analyzers is predefined.

`semantic-lex-beginning-of-line'
`semantic-lex-newline'
`semantic-lex-newline-as-whitespace'
`semantic-lex-ignore-newline'
`semantic-lex-whitespace'
`semantic-lex-ignore-whitespace'
`semantic-lex-number'
`semantic-lex-symbol-or-keyword'
`semantic-lex-charquote'
`semantic-lex-punctuation'
`semantic-lex-punctuation-type'
`semantic-lex-paren-or-list'
`semantic-lex-open-paren'
`semantic-lex-close-paren'
`semantic-lex-string'
`semantic-lex-comments'
`semantic-lex-comments-as-whitespace'
`semantic-lex-ignore-comments'
`semantic-lex-default-action'

*** Some lexers are predefined too.

A comment lexer: `semantic-comment-lexer' that handles comments.
A `semantic-simple-lexer' that ignores comments and whitespace, and
returns tokens corresponding to syntax as specified by the syntax
table.

*** `semantic-lex' core "overload" function.

Called to lexically analyze text in an area of the current buffer.

** Parsing

*** API to manage a parse tree state.

`semantic-parse-tree-set-needs-update'
Indicate that the current parse tree needs to be updated.

`semantic-parse-tree-needs-update-p'
Return non-nil if the current parse tree needs to be updated.

`semantic-parse-tree-set-needs-rebuild'
Indicate that the current parse tree needs to be rebuilt.

`semantic-parse-tree-needs-rebuild-p'
Return non-nil if the current parse tree needs to be rebuilt.

`semantic-parse-tree-set-up-to-date'
Indicate that the current parse tree is up to date.

`semantic-parse-tree-up-to-date-p'
Return non-nil if the current parse tree is up to date.
   
*** Core "overload" functions to abstract call to parsers.

New parsers can be plugged-in easily by overriding the following
core functions:

`semantic-parse-stream' called to parse a given stream, starting at a
given nonterminal rule.

`semantic-parse-changes' called to reparse changes in the current
buffer.

`semantic-parse-region' called to parse a buffer's area.

*** Four core parsers are available.

- Two general parsers

  - The Semantic "bovinator".
  - A new LALR(1) parser: Wisent, port of Bison 1.3 in Elisp.

- Two specific parsers

  - The Elisp parser based on the Emacs built-in function `read'.
  - A regexp parser used in `texinfo-mode'.

*** Iterative parser.

Iterative parsers are better than rule-based iterative functions
in that they can handle obscure errors more cleanly.

The new `semantic-repeat-parse-whole-stream' helper function abstracts
this action for other parser centric routines.

*** Incremental parser.

In Semantic 1.x, changes were handled in a simplistic manner, where
tokens that changed were reparsed one at a time.  Any other form of
edit were managed through a full re-parse.

The new `semantic-edits-incremental-parser' attempts to minimize the
number of times a full re-parse needs to occur.  While overlays and
tokens will continue to be recycled in the simple case, new cases
where tokens are inserted or old tokens removed from the original list
are handled.

*** Deprecated and removed API.

The `semantic-flex' API is deprecated, and replaced by the new
`semantic-lex' API.  The old API still exists for compatibility with
Semantic 1.x.

`semantic-parse-region' should be used instead of
`semantic-bovinate-region-until-error' and
`semantic-bovinate-from-nonterminal-full' which still exist for
compatibility with the Semantic 1.x API.

The old incremental parser `semantic-rebovinate-token' and associated
`semantic-show-dirty-mode' have been removed and replaced respectively
by new `semantic-edits-incremental-parser' and
`semantic-highlight-edits-mode'.

`semantic-bovinate-toplevel-override' is replaced by the new core
parsing "overloads".

`semantic-bovine-toplevel-full-reparse-needed-p' and
`semantic-bovine-toplevel-partial-reparse-needed-p' are replaced by
the new parse tree state management API.

`semanticdb-project-predicates' hook is renamed
`semanticdb-project-predicate-functions'.

* Grammar framework.

Semantic 2.0 introduced a new common grammar framework to simplify
development of grammars suitable to parser needs.

** New "abstract" major mode: `semantic-grammar-mode'.
That defines a useful environment to develop grammars (indentation,
syntax highlighting, parsing, etc.).

By deriving new "concrete" major modes one can provide customized
generators that convert a grammar parse tree into Elisp forms needed
by a particular parser.

** New "overloads" are provided to customize Elisp generation.

`grammar-setupcode-builder'
That returns the setup code form.

`grammar-parsetable-builder'
That returns the parser table value.

`grammar-keywordtable-builder'
That returns the keyword table table value.

`grammar-tokentable-builder'
That returns the token table value.

** New grammar modes derived from `semantic-grammar-mode'.

*** `bovine-grammar-mode'.
That converts grammar input form into Elisp code to be used by the
"bovinator".  Such grammars are associated to the .by file extension.

That new mode obsoletes the previous `bnf-mode' used by Semantic.
However .bnf grammars are still supported for compatibility with
Semantic version 1.  Currently only c.bnf has been translated into a
c.by format.

*** `wisent-grammar-mode'.
That converts grammar input form into Elisp code to be used by the
Wisent LALR parser.  Such grammars are associated to the .wy
file extension.

* Database.

** semanticdb.el

*** `semanticdb-abstract-table'
New base class for all tables of tokens lists.

*** `semantidb-table'
Inherits from the abstract table.

*** `semanticdb-project-database'
No longer saves itself to a file.

** semanticdb-file.el
New routines for databases saved to disk in plain EIEIO save files.

*** `semanticdb-project-database-file'
File based project database type.

** semanticdb-search.el
All search routines have been moved into this file.
All search routines are now methods.

*** `semanticdb-search-results-table'
Class for any search in a database with no tables of its own.

*** Different search classes
Searches in databases have been broken into three classes.
- Basic search - on values as stored directly in a semantic token.
- Advanced search - complex searches of relationships.  Needed for
  system databases which cannot support a generic search.
- Generic search - Takes a predicate.  System databases cannot usually
  support this style of search.

** semanticdb-system.el
Representation of a database belonging to system libraries.
These databases may not come from source code, and can represent
object files, header file libraries and the like.

*** `semanticdb-project-database-system'
Baseclass for any system database.

*** `semanticdb-project-database-system-c'
Class for C libraries of header files.

** semanticdb-el.el
Special system database representing Emacs' internal state.
Implements all search routines optimized as much as possible.

*** `semanticdb-table-emacs-lisp'
Table representing search results for Emacs Lisp symbols.

*** `semanticdb-project-database-emacs-lisp'
Database representing Emacs' internal symbol obarray.

** semanticdb-mk
Routines for building semantic.cache files from a command line script.

* Utilities.

** `semantic-find-nonterminal-parent-by-overlay'
Find the parent of a nonterminal token by overlays.
    
* Minor modes.

** `semantic-show-parser-state-mode'
Display the parser state in the modeline.

** `semantic-highlight-edits-mode'
Highlight areas that a user edits.

* Hooks.

** `semantic-before-auto-parse-hooks'
Run before option `semantic-auto-parse-mode' begins parsing.

** `semantic-after-auto-parse-hooks'
Run after option `semantic-auto-parse-mode' has parsed.

* Setup.

A lot of things are now auto-loaded on demand.

* Languages.

** Python parser added.
The LALR grammar is based on the official grammar with slight
modifications.  The tokens generated are formatted similar to
those produced by the Java parser.

** Erlang parser added.
The grammar was written for semantic 1.4 in BNF format.

TBD.


Local variables:
mode: outline
paragraph-separate: "[ 	]*$"
end:
