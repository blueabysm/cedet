;; BY notation for Makefiles.
;;
;; Copyright (C) 1999, 2000, 2001, 2002, 2003 Eric M. Ludlam
;;
;; Author: Eric M. Ludlam <zappo@gnu.org>
;; X-RCS: $Id: make.by,v 1.2 2003-01-31 13:50:01 zappo Exp $
;;
;; make.bnf is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.
;;

%start         Makefile
%outputfile    "semantic-make.el"
%parsetable    semantic-toplevel-make-bovine-table
%keywordtable  semantic-make-keyword-table
%languagemode  makefile-mode
%setupfunction semantic-default-make-setup

;; This was always a test case.
%quotemode     backquote

%(setq semantic-symbol->name-assoc-list '((variable . "Variables")
					  (function . "Rules")
					  (include . "Dependencies"))
       semantic-case-fold t
       semantic-expand-nonterminal 'semantic-expand-make-nonterminal
       semantic-lex-syntax-modifications '((?. "_")
					   (?= ".")
					   (?/ "_")
					   (?$ ".")
					   (?+ ".")
					   (?\\ ".")
					   )
       imenu-create-index-function 'semantic-create-imenu-index
       )%

%token IF "if"
%token IFDEF "ifdef"
%token IFNDEF "ifndef"
%token IFEQ "ifeq"
%token IFNEQ "ifneq"
%token ELSE "else"
%token ENDIF "endif"
%put { IF ELSE ENDIF } summary "Conditional: if (expression) ... else ... endif"
%put IFDEF  summary "Conditional: ifdef (expression) ... else ... endif"
%put IFNDEF summary "Conditional: ifndef (expression) ... else ... endif"
%put IFEQ summary "Conditional: ifeq (expression) ... else ... endif"
%put IFNEQ summary "Conditional: ifneq (expression) ... else ... endif"
%token INCLUDE "include"
%put INCLUDE summary "Macro: include filename1 filename2 ..."

%token <punctuation> COLON     "\\b[:]\\b"
%token <punctuation> PLUS      "\\b[+]\\b"
%token <punctuation> EQUAL     "\\b[=]\\b"
%token <punctuation> DOLLAR    "\\b[$]\\b"
%token <punctuation> BACKSLASH "\\b[\\]\\b"

%%

Makefile : variable
	 | rule
	 | conditional
	 | include
	 | whitespace ( nil )
	 | newline ( nil )
	 ;

variable: symbol opt-whitespace equals opt-whitespace element-list
	  (,$1 variable nil ,$5 nil nil)
	;

rule: targets opt-whitespace colons opt-whitespace element-list commands
      (,$1 function nil ,$5 nil nil)
    ;

targets: target opt-whitespace targets
	 ( (car ,$1) (car ,@$3) )
       | target
	 ( (car ,$1) )
       ;

target: sub-target target
	( (concat (car ,$1) (car ,@$3) ) )
      | sub-target
	( (car ,$1) )
      ;

sub-target: symbol
	  | string
	  | varref
	  ;

conditional: IF whitespace symbol newline
	     ( nil )
	   | IFDEF whitespace symbol newline
	     ( nil )
	   | IFNDEF whitespace symbol newline
	     ( nil )
	   | IFEQ whitespace expression newline
	     ( nil )
	   | IFNEQ whitespace expression newline
	     ( nil )
	   | ELSE newline
	     ( nil )
	   | ENDIF newline
	     ( nil )
	   ;

expression : semantic-list
	   ;

include: INCLUDE whitespace element-list
	 (,$3 include nil nil)
       ;

equals: COLON EQUAL ()
      | PLUS EQUAL ()
      | EQUAL ()
      ;

colons: COLON COLON ()
      | COLON ()
      ;

element-list: elements newline
	      ( ,@$1 )
	    ;

elements: element whitespace elements
	  ( ,$1 ,@$3 )
	| element
	  ( ,$1 )
	| ;;EMPTY
	;
  
element: sub-element element
	 ( (concat (car ,$1) (car ,$2)) )
       | ;;EMPTY
       ;

sub-element: symbol
	   | string
	   | punctuation
	   | semantic-list
	     ( (buffer-substring-no-properties
		 (identity start) (identity end)) )
	   ;

varref: DOLLAR semantic-list
	( (buffer-substring-no-properties (identity start) (identity end)) )
      ;

commands: shell-command newline commands
	  ( ,$1 ,@$2 )
	| ;;EMPTY
	  ( )
	;

opt-whitespace : whitespace ( nil )
	       | ;;EMPTY
	       ;
;; End