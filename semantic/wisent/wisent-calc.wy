;;; wisent-calc.wy --- Grammar of the infix notation calculator

;; Copyright (C) 2002 David Ponce

;; Author: David Ponce <david@dponce.com>
;; Maintainer: David Ponce <david@dponce.com>
;; Created: 19 Feb 2002
;; Keywords: syntax
;; X-RCS: $Id: wisent-calc.wy,v 1.1 2002-02-26 18:47:04 ponced Exp $

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.

;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:
;;
;; This is a port of the Bison 1.28d Infix Calc sample program to the
;; elisp LALR parser Wisent.  It illustrates usage of operator
;; precedence and contextual precedence.  Implementation is in the
;; file wisent-calc.el.

;;; History:
;; 

;; --------
;; Settings
;; --------
%outputfile    "wisent-calc.el"
%parsetable    wisent-calc-automaton
%tokentable    wisent-calc-tokens
%setupfunction wisent-calc-setup-parser

;; Terminals
(setq semantic-number-expression
      (concat "\\([0-9]+\\([.][0-9]*\\)?\\([eE][-+]?[0-9]+\\)?"
              "\\|[.][0-9]+\\([eE][-+]?[0-9]+\\)?\\)")
      semantic-flex-depth nil
      semantic-flex-syntax-modifications '((?\; ".") (?\= ".")
                                           (?\+ ".") (?\- ".")
                                           (?\* ".") (?\/ ".")
                                           (?\^ ".")
                                           )
      )

%put {open-paren close-paren punctuation} string t

%token <number>      NUM
%token <punctuation> NL     ";"
%token <punctuation> EQ     "="
%token <punctuation> PLUS   "+"
%token <punctuation> MINUS  "-"
%token <punctuation> MULT   "*"
%token <punctuation> DIV    "/"
%token <punctuation> EXP    "^"
%token <open-paren>  LPAREN "("
%token <close-paren> RPAREN ")"

;; Precedence
%nonassoc EQ                    ;; comparison
%left     PLUS MINUS
%left     MULT DIV
%left     NEG                   ;; negation--unary minus
%right    EXP                   ;; exponentiation

%%

;; The grammar
input:
 ;; EMPTY
    (identity "")
  | input line
    (format "%s%s" $1 $2)
  ;

line:
    NL
    (format "%s " $1)
  | exp NL
    (format "%s%s " $1 $2)
  ;

exp:
    NUM
    (string-to-number $1)
  | exp EQ exp
    (progn
      (if (not (= $1 $3))
          (message "wisent-calc error: %d != %d" $1 $3))
      (= $1 $3))
  | exp PLUS exp
    (+ $1 $3)
  | exp MINUS exp
    (- $1 $3)
  | exp MULT exp
    (* $1 $3)
  | exp DIV exp
    (/ $1 $3)
  | MINUS exp %prec NEG
    (- $2)
  | exp EXP exp
    (expt $1 $3)
  | LPAREN exp RPAREN
    (identity $2)
  ;

;;; wisent-calc.wy ends here
